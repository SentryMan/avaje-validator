name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New version to set (e.g., 1.0-RC1, 1.0)'
        default: 2.12-RC1
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    # Protection rules for this environment are set in the repository settings.
    environment: maven
    steps:
    - uses: actions/checkout@v4

    - name: Maven cache
      uses: actions/cache@v4
      env:
        cache-name: maven-cache
      with:
        path: ~/.m2
        key: build-${{ env.cache-name }}
    - name: Set up Java and Maven
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        # GPG Key setup for signing artifacts
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: GPG_PASSPHRASE

    - name: Bump version in pom.xml
      run: mvn versions:set -DnewVersion=${{ github.event.inputs.new_version }} -DgenerateBackupPoms=false

    # - name: Deploy JAR to Maven Central
    #   run: mvn clean deploy -Pcentral
    #   env:
    #     MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
    #     MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
    #     MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}


    - name: Create Pull Request for Version Bump
      id: create-pr
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Version ${{ github.event.inputs.new_version }}"
        branch: "release/${{ github.event.inputs.new_version }}"
        title: "Release: Version ${{ github.event.inputs.new_version }}"
        body: |
          Release version `${{ github.event.inputs.new_version }}` to be deployed.
        base: main

    - name: Configure Git
      run: |
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"

    - name: Trigger PR workflows
      if: steps.create-pr.outputs.pull-request-number
      run: |
        # Get the PR branch name
        PR_BRANCH="release/${{ github.event.inputs.new_version }}"

        # Trigger workflows on the PR branch by making a small commit
        git checkout $PR_BRANCH
        git commit --allow-empty -m "Trigger CI workflows"
        git push origin $PR_BRANCH

        # Remove the empty commit after triggering
        git reset --hard HEAD~1
        git push --force-with-lease origin $PR_BRANCH
      env:
        GH_TOKEN: ${{ secrets.PAT }}

    - name: Approve Pull Request
      if: steps.create-pr.outputs.pull-request-number
      run: |
        gh pr review ${{ steps.create-pr.outputs.pull-request-number }} --approve --body "Auto-approving release PR"
      env:
        GH_TOKEN: ${{ secrets.PAT }}

    - name: Enable auto-merge for PR
      if: steps.create-pr.outputs.pull-request-number
      run: |
        gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --merge --auto
      env:
        GH_TOKEN: ${{ secrets.PAT }}
